import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GithubProvider from "next-auth/providers/github";
import bcrypt from "bcryptjs";

import { connectMongoDB } from "@/lib/mongodb";
import sendEmail from "@/lib/sendEmail";

import Admin from "@/models/admin";
import Manager from "@/models/manager";
import Engineer from "@/models/engineer";
import User from "@/models/user";

// Role mapping to Mongoose models
const roleModelMap = {
  admin: Admin,
  manager: Manager,
  engineer: Engineer,
  user: User,
};

// Generate 6-digit OTP and expiry time
const generateOTP = () => ({
  code: Math.floor(100000 + Math.random() * 900000).toString(),
  expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes from now
});

const authOptions = {
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
    }),

    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email", placeholder: "you@example.com" },
        password: { label: "Password", type: "password" },
        role: { label: "Role", type: "text" },
        otp: { label: "OTP", type: "text", placeholder: "123456" },
      },
      async authorize(credentials) {
        try {
          const { email, password, role = "user", otp } = credentials || {};

          if (!email || !password) throw new Error("Email and password are required");

          await connectMongoDB();

          const modelKey = role.toLowerCase();
          const Model = roleModelMap[modelKey];
          if (!Model) throw new Error("Invalid user role");

          const user = await Model.findOne({ email }).select("+password +otp +otpExpires +otpVerified +otpRequired");
          if (!user) throw new Error("Invalid email or password");

          if (!user.password) throw new Error("Please use your social login provider");

          const isPasswordValid = await bcrypt.compare(password, user.password);
          if (!isPasswordValid) throw new Error("Invalid email or password");

          // Ensure otpRequired field exists
          if (typeof user.otpRequired !== "boolean") {
            user.otpRequired = true;
            await user.save();
          }

          // Handle OTP requirement
          if (user.otpRequired) {
            if (otp) {
              // OTP validation
              if (!user.otp || !user.otpExpires) {
                throw new Error("No OTP found. Please request a new one.");
              }

              const isOtpValid = await bcrypt.compare(otp, user.otp);
              if (!isOtpValid) throw new Error("Invalid OTP code");

              if (new Date(user.otpExpires) < new Date()) {
                throw new Error("OTP has expired. Please request a new one.");
              }

              // OTP is valid
              user.otp = undefined;
              user.otpExpires = undefined;
              user.otpVerified = true;
              await user.save();
            } else {
              // No OTP provided or expired — generate and send a new one
              if (!user.otp || new Date(user.otpExpires) < new Date()) {
                const { code, expiresAt } = generateOTP();
                const hashedOTP = await bcrypt.hash(code, 10);

                user.otp = hashedOTP;
                user.otpExpires = expiresAt;
                user.otpVerified = false;
                await user.save();

                await sendEmail({
                  to: user.email,
                  subject: "Your One-Time Password (OTP)",
                  html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                      <h2>Your Verification Code</h2>
                      <p>Please use the following code to complete your login:</p>
                      <div style="background: #f0f0f0; padding: 20px; text-align: center;">
                        <h3>${code}</h3>
                      </div>
                      <p style="font-size: 14px; color: #666;">
                        This code will expire in 15 minutes.
                      </p>
                    </div>
                  `,
                });
              }

              // Frontend will detect this string to show OTP form
              throw new Error("OTP_REQUIRED");
            }
          }

          // ✅ Successful login
          return {
            id: user._id.toString(),
            email: user.email,
            role: modelKey,
            name: user.name || "",
            otpVerified: user.otpVerified || false,
          };
        } catch (error) {
          console.error("Authentication error:", error.message);
          throw new Error(error.message || "Authentication failed");
        }
      },
    }),
  ],

  session: {
    strategy: "jwt",
    maxAge: 4 * 60 * 60, // 4 hours
  },

  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
        token.otpVerified = user.otpVerified || false;
      }
      return token;
    },
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id;
        session.user.role = token.role;
        session.user.otpVerified = token.otpVerified || false;
      }
      return session;
    },
  },

  pages: {
    signIn: "/auth/login",
    error: "/auth/error",
    verifyRequest: "/auth/verify-otp",
  },

  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
